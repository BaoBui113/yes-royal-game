const listDataBlackJack = [
  {
    title: '용어 설명',
    data: [
      '블랙잭：블랙잭(또는 내츄럴이라고도 함)은 첫 두 카드에서 합계가 21이 되는 것입니다. 따라서 블랙잭은 에이스와 10의 값을 갖는 카드로 이루어지며 추가 조건은 반드시 처음 2개의 카드여야 한다는 점입니다. 블랙잭이 되면 플레이어는 3대2의 비율로 상금을 받습니다.',
      '21：2개 이상의 카드의 합계가 총 21이 됩니다.',
      '버스트: 핸드의 합계가 21을 초과.',
      '타이: 플레이어와 딜러의 총 핸드 값이 동일 - 플레이어가 베팅을 유지합니다.',
      '하드 핸드: 에이스가 없거나 값이 1인 에이스만 있는 핸드를 소프트 핸드와는 달리 한가지 값만 받을 수 있으므로 하드 핸드라고 합니다 (원하는 대로 에이스의 값을 1이나 11로 정할 수 있습니다).',
      '소프트 핸드: 값이 11인 에이스가 포함된 핸드를 소프트 핸드라고 부릅니다.',
    ],
  },
  {
    title: '카드의 값',
    data: [
      '2에서 10까지의 카드는 자체 액면 값을 가지고 있습니다.',
      '잭, 퀸 또는 킹은 값이 10입니다.',
      '에이스는 값이 1 혹은 11입니다. 값을 11로 계산하면 플레이어나 딜러의 점수가 21을 초과하게 될 경우에는 값이 1이 됩니다.',
    ],
  },
  {
    title: '플레이어의 선택',
    data: [
      '앤티 베팅: 카드를 돌리기 전에 거는 기본 배팅.',
      '페어스: 카드를 받기 전에 쌍으로 거는 사이드 베팅. 첫 2 카드가 동일할 경우 플레이어가 11대 1(11배)로 상금을 받습니다.',
      '히트: 다른 카드를 받습니다.',
      '스탠드: 더 이상의 카드를 받지 않습니다.',
      '보험: 내츄럴 21을 가진 딜러에 대해 첫 베팅액의 최대 절반까지 추가 베팅하는 것 - 딜러가 보여주는 카드가 에이스일 때만 허용됨. 만약 딜러가 가지고 있던 다른 카드가 10이어서 블랙잭이 된 경우, 보험을 건 금액의 2-1의 비율(2배)로 플레이어에게 보험금을 지불하지만 딜러가 블랙잭이 안되는 경우는 보험을 건 금액을 모두 잃게 됩니다.',
      '스플릿: 첫 카드들이 값이 동일할 때만 허용. 각 카드를 사용하여 별도 핸드를 시작하고 앤티 베팅과 동일한 금액으로 두 번째 베팅을 합니다. 다시 스플릿하는 것은 허용되지 않습니다. 스플릿 핸드 중 하나에 10과 에이스가 나왔을 경우, 이것은 블랙잭으로 간주되지 않고 그냥 21로 처리됩니다.',
      '더블 다운: 처음 받은 두 장의 카드 합이 하드 핸드 9, 10 또는 11(하드 핸드는 처음 받은 두 장의 카드에 에이스 카드가 들어 있지 않은 핸드를 의미)일 경우 플레이어는 앤티 베팅과 같은 금액을 추가로 베팅할 수 있습니다. 하지만 카드는 단 한 장만 받을 수 있습니다.',
      '예외: 에이스 카드 2장으로 스플릿한 후에는 더블 다운할 수 없습니다. 각 핸드는 추가 카드 한 장만 받을 수 있습니다.',
    ],
  },
];

const listDataRuleBlackJack = [
  {
    title: '하우스 룰',
    data: [
      '딜러는 항상 히트나 스탠드를 선택할 때 하우스 룰을 준수해야 합니다. 블랙잭의 규칙은 딜러가 17(하드 핸드와 소프트 핸드)일 때 스탠드하고 16일 때까지 계속 카드를 뽑아야 합니다.',
    ],
  },
  {
    title: '게임 규칙 요약',
    data: [
      '모든 플레이어가 앤티 베팅을 하고 옵션인 사이드 베팅 “페어스”를 하면 플레이가 시작됩니다. 그러면 모든 플레이어가 2장씩 액면을 드러낸 카드를 받습니다. 딜러 자신은 액면을 드러낸 카드 1장과 감춘 카드 1장씩을 갖습니다.',
      '액면을 드러낸 카드를 본 다음 각 플레이어들은 순서대로(우측에서 좌측으로 좌석 1번에서 7번까지) 딜러에게 자신의 핸드를 종료할지 결정하여 알려줍니다. 모든 플레이어들이 자신의 결정을 한 다음 딜러가 자신의 액면을 감춘 카드를 펼쳐 하우스의 규칙에 따라 자신의 핸드를 종료합니다.',
    ],
  },
  {
    title: '착석 플레이어와 외부 플레이어',
    data: [
      '게임에 참여하여 "착석(Sit-in)” 버튼을 누른 플레이어는 착석 플레이어가 되어 게임에서 모든 의사결정을 할 수 있습니다.',
      '테이블의 좌석 유무에 관계 없이 외부 플레이어로서 게임에 참여하여 베팅을 할 수 있습니다. 외부 플레이어는 게임에서 의사결정을 할 수 없으며 착석 플레이어를 따라야 합니다.',
      '게임에서 외부 플레이어에 대한 테이블 제한은 없습니다. 일반적으로 외부 플레이어의 테이블 제한은 같은 테이블에 있는 착석 플레이어의 테이블 제한보다 낮습니다.',
    ],
  },
];

const ListRuleBlackJack = ({
  title,
  data,
}: {
  title: string;
  data: string[];
}) => {
  return (
    <>
      <h3 className="text-base my-4 font-semibold">{title}</h3>
      {data.map((item, index) => {
        return (
          <p key={index} className="my-[14px]">
            {item}
          </p>
        );
      })}
    </>
  );
};

const ListBlackJack = ({ title, data }: { title: string; data: string[] }) => {
  return (
    <>
      <h3 className="text-base my-4">{title}</h3>
      <ul className="pl-10 space-y-1 list-disc marker:text-[#948477]">
        {data.map((item, index) => {
          return <li key={index}>{item}</li>;
        })}
      </ul>
    </>
  );
};
export default function BlackJack() {
  return (
    <>
      <p className="my-4">블랙잭의 목표</p>
      <p className="my-[14px]">
        이 게임의 기본 전제는 여러분이 자신의 핸드 값이 딜러의 핸드 값보다 21에
        근접하면서 21을 넘지 않기를 원한다는 것입니다. 테이블의 다른
        플레이어들은 신경쓸 필요가 없습니다. 여러분의 핸드는 엄격하게 딜러의
        핸드를 대상으로 플레이됩니다. 딜러의 플레이 규칙은 엄격하게 고정되어
        있으며 딜러가 임의로 결정할 여지가 없습니다. 따라서 여러분이 쥐고 있는
        카드를 딜러나 테이블에서 플레이하는 다른 사람들이 보아도 아무 문제가
        없습니다. 따라서, 슈 게임에서 플레이를 하는 경우 플레이어 카드는 모두
        드러내 놓고 돌리게 됩니다.
      </p>
      <p className="my-[14px]">
        {`8개의 카드 데크가 있는 "슈(shoe)"가 사용됩니다. 이 게임에서 초보자가
        누릴 수 있는 장점은 각 플레이어의 앞에서 플레이어들의 카드를 드러내 놓고
        돌리며 딜러가 플레이어의 질문 및 결정에 대해 도움을 제공할 수 있다는
        것입니다`}
      </p>
      {listDataBlackJack.map((blackJack, index) => {
        return (
          <ListBlackJack
            key={index}
            title={blackJack.title}
            data={blackJack.data}
          />
        );
      })}
      {listDataRuleBlackJack.map((blackJack, index) => {
        return (
          <ListRuleBlackJack
            key={index}
            data={blackJack.data}
            title={blackJack.title}
          />
        );
      })}
    </>
  );
}
